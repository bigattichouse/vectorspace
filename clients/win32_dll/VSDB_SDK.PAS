unit VSDB_SDK;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 11/17/2005                                            }
{    Generated Time: 12:47:56 PM                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


 
type
  vs_cloudspace = pointer;

var
  create_cloudspace: function: pointer  stdcall;
var
  destroy_cloudspace: procedure(cloudspace: pointer)  stdcall ;
var
  vsdb_execute: function(cloudspace: pointer;
                         command: Char; 
                         element: PChar; 
                         value: Single): Integer  stdcall ;
var
  vsdb_outputbuffer: function(cloudspace: pointer; 
                              buffer: PChar): Integer  stdcall ;
var
  vsdb_savecloudspace: function(cloudspace: pointer;
                              datafile,thesaurusfile: PChar): Integer  stdcall ;

var
  vsdb_loadcloudspace: function(cloudspace: pointer;
                              datafile,thesaurusfile: PChar): Integer  stdcall ;

var
  vsdb_metacluster: function(cloudspace: pointer;
                              segment:integer;
                              segmentsize:integer;
                              threshold:Single;
                              cluster_minimum_size:integer): Integer  stdcall ;


var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('VSDB_SDK.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @create_cloudspace := GetProcAddress(DLLHandle,'create_cloudspace');
  {$IFDEF WIN32}
    Assert(@create_cloudspace <> nil);
  {$ENDIF}
    @destroy_cloudspace := GetProcAddress(DLLHandle,'destroy_cloudspace');
  {$IFDEF WIN32}
    Assert(@destroy_cloudspace <> nil);
  {$ENDIF}
    @vsdb_execute := GetProcAddress(DLLHandle,'vsdb_execute');
  {$IFDEF WIN32}
    Assert(@vsdb_execute <> nil);
  {$ENDIF}
    @vsdb_outputbuffer := GetProcAddress(DLLHandle,'vsdb_outputbuffer');
  {$IFDEF WIN32}
    Assert(@vsdb_outputbuffer <> nil);
  {$ENDIF}


    @vsdb_savecloudspace := GetProcAddress(DLLHandle,'vsdb_savecloudspace');
  {$IFDEF WIN32}
    Assert(@vsdb_savecloudspace <> nil);
  {$ENDIF}

    @vsdb_loadcloudspace := GetProcAddress(DLLHandle,'vsdb_loadcloudspace');
  {$IFDEF WIN32}
    Assert(@vsdb_loadcloudspace <> nil);
  {$ENDIF}

    @vsdb_metacluster := GetProcAddress(DLLHandle,'vsdb_metacluster');
  {$IFDEF WIN32}
    Assert(@vsdb_metacluster <> nil);
  {$ENDIF}


  end
  else
  begin
    DLLLoaded := False;
    { Error: VSDB_SDK.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
